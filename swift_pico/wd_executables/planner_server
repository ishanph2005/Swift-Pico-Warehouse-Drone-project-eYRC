#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
import numpy as np
from std_msgs.msg import Int32MultiArray


class MinimalPublisher(Node):

    def __init__(self):
        super().__init__('planner_server')
        self.publisher_ = self.create_publisher(Int32MultiArray, 'random_points', 10)
        timer_period = 0.1  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)

    def timer_callback(self):
        msg = Int32MultiArray()
        msg.data = [0]*4
        msg.data[0] = 519
        msg.data[1] = 63
        msg.data[2] = 950
        msg.data[3] = 102
        self.get_logger().info(f'Published: Start point: [{msg.data[0]}, {msg.data[1]}], Finish point: [{msg.data[2]}, {msg.data[3]}]')
        self.publisher_.publish(msg)


def main(args=None):
    rclpy.init(args=args)

    minimal_publisher = MinimalPublisher()

    rclpy.spin(minimal_publisher)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    minimal_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()